{"version":3,"sources":["components/Navbar.js","components/About.js","components/Textform.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","href","title","type","id","onClick","togglemode","for","mode","About","style","backgroundColor","color","Textform","useState","text","setText","heading","name","value","onChange","event","target","cols","rows","txt","toUpperCase","toLowerCase","App","setMode","document","body","background","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.87e2ac74.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport default function Navbar(props) {\r\n    return (\r\n        <div>\r\n            <nav className=\"navbar navbar-expand-lg navbar-light bg-dark\">\r\n            <div className=\"container-fluid\">\r\n                <a className=\"navbar-brand\" href=\"/\">{props.title}</a>\r\n                <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                <span className=\"navbar-toggler-icon\"></span>\r\n                </button>\r\n\r\n                <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n                <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n                    <li className=\"nav-item\">\r\n                    <a className=\"nav-link active\" aria-current=\"page\" href=\"/\">Home</a>\r\n                    </li>\r\n                    <li className=\"nav-item\">\r\n                    <a className=\"nav-link\" href=\"/about\">About</a>\r\n                    </li>\r\n                </ul>\r\n                </div>\r\n\r\n                <div className=\"form-check form-switch\">\r\n                <input className=\"form-check-input\" type=\"checkbox\" id=\"flexSwitchCheckDefault\" onClick={props.togglemode}/>\r\n                <label className=\"form-check-label text-light\" for=\"flexSwitchCheckDefault\">{props.mode}</label>\r\n                </div>\r\n            </div>\r\n            </nav>\r\n        </div>\r\n    )\r\n}\r\n\r\nNavbar.propTypes={\r\n    title: PropTypes.string.isRequired\r\n}","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\n\r\nexport default function About(props) {\r\n    return (\r\n        <div>\r\n            <div className=\"container\">\r\n            <div className=\"accordion\" id=\"accordionExample\">\r\n                <div className=\"accordion-item\">\r\n                    <h2 className=\"accordion-header\" id=\"headingOne\">\r\n                    <button className=\"accordion-button\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseOne\" aria-expanded=\"true\" aria-controls=\"collapseOne\" style={{backgroundColor: props.mode==='Disable Dark Mode' ? 'black':'white' , color: props.mode==='Disable Dark Mode' ? 'white':'black'}}>\r\n                        Accordion Item #1\r\n                    </button>\r\n                    </h2>\r\n                    <div id=\"collapseOne\" className=\"accordion-collapse collapse show\" aria-labelledby=\"headingOne\" data-bs-parent=\"#accordionExample\">\r\n                    <div className=\"accordion-body\" style={{backgroundColor: props.mode==='Disable Dark Mode' ? 'grey':'white' , color: props.mode==='Disable Dark Mode' ? 'white':'black'}}>\r\n                        <strong>This is the first item's accordion body.</strong> It is shown by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                    </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"accordion-item\" >\r\n                    <h2 className=\"accordion-header\" id=\"headingTwo\">\r\n                    <button className=\"accordion-button collapsed\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseTwo\" aria-expanded=\"false\" aria-controls=\"collapseTwo\" style={{backgroundColor: props.mode==='Disable Dark Mode' ? 'black':'white' , color: props.mode==='Disable Dark Mode' ? 'white':'black'}}>\r\n                        Accordion Item #2\r\n                    </button>\r\n                    </h2>\r\n                    <div id=\"collapseTwo\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingTwo\" data-bs-parent=\"#accordionExample\">\r\n                    <div className=\"accordion-body\" style={{backgroundColor: props.mode==='Disable Dark Mode' ? 'grey':'white' , color: props.mode==='Disable Dark Mode' ? 'white':'black'}}>\r\n                        <strong>This is the second item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                    </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"accordion-item\">\r\n                    <h2 className=\"accordion-header\" id=\"headingThree\">\r\n                    <button className=\"accordion-button collapsed\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseThree\" aria-expanded=\"false\" aria-controls=\"collapseThree\" style={{backgroundColor: props.mode==='Disable Dark Mode' ? 'black':'white' , color: props.mode==='Disable Dark Mode' ? 'white':'black'}}>\r\n                        Accordion Item #3\r\n                    </button>\r\n                    </h2>\r\n                    <div id=\"collapseThree\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingThree\" data-bs-parent=\"#accordionExample\">\r\n                    <div className=\"accordion-body\" style={{backgroundColor: props.mode==='Disable Dark Mode' ? 'grey':'white' , color: props.mode==='Disable Dark Mode' ? 'white':'black'}}>\r\n                        <strong>This is the third item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                    </div>\r\n                    </div>\r\n                </div>\r\n                </div></div>\r\n        </div>\r\n    )\r\n}\r\n","import React, {useState} from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nexport default function Textform(props) {\r\n    const [text, setText] = useState();\r\n    const toupcase=()=>\r\n    {\r\n        let txt=text.toUpperCase();\r\n        setText(txt);\r\n    }\r\n    const tolocase=()=>\r\n    {\r\n        let txt=text.toLowerCase();\r\n        setText(txt);\r\n    }\r\n    const clr=()=>\r\n    {\r\n        let txt=\"\";\r\n        setText(txt);\r\n    }\r\n    const handleonchange =(event)=>\r\n    {\r\n        setText(event.target.value);\r\n    }\r\n    return (\r\n        <>\r\n        <div style={{color: props.mode==='Disable Dark Mode' ? 'white':'black'}}>\r\n            <h1>{props.heading}</h1>\r\n            <textarea name=\"util\" id=\"util\" value={text} onChange={handleonchange} style={{backgroundColor: props.mode==='Disable Dark Mode' ? 'grey':'white' , color: props.mode==='Disable Dark Mode' ? 'white':'black'}} cols=\"150\" rows=\"7\">{setText}</textarea>\r\n\r\n            <button className=\"btn btn-primary mx-3\" onClick={toupcase} >Convert To Uppercase</button>\r\n            <button className=\"btn btn-primary mx-3\" onClick={tolocase}>Convert To Lowercase</button>\r\n            <button className=\"btn btn-primary mx-3\" onClick={clr}>Clear</button>\r\n        </div>\r\n        <div>\r\n            <h1>Text Summary</h1>\r\n            {/* <p style={{backgroundColor: props.mode==='Disable Dark Mode' ? 'grey':'white'}}>\r\n            No. of Characters : {text.length}<br/>\r\n            No. of Words : {text.split(\" \").length}<br/>\r\n            Time taken to read : {text.split(\" \").length * 0.008} minutes\r\n\r\n            </p> */}\r\n            <h2>\r\n                Preview\r\n            </h2>\r\n            <p style={{backgroundColor: props.mode==='Disable Dark Mode' ? 'grey':'white'}}>{text}</p>\r\n        </div>\r\n        </>\r\n    )\r\n}","import './App.css';\nimport React, { useState } from 'react'\nimport Navbar from './components/Navbar';\nimport About from './components/About';\nimport Textform from './components/Textform';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\n\nfunction App() {\n  const [mode, setMode] = useState('Enable Dark Mode');\n  const togglemode = ()=>\n  {\n    if(mode==='Enable Dark Mode')\n    {\n      document.body.style.background=\"black\";\n      document.body.style.color=\"white\";\n      setMode('Disable Dark Mode');\n    }\n    else\n    {\n      document.body.style.background=\"white\";\n      document.body.style.color=\"black\";\n      setMode('Enable Dark Mode');\n    }\n  }\n\n  return (\n    <>\n      <Navbar title=\"Text-Utils\" mode={mode} togglemode={togglemode}/>\n      <Router>\n      <Switch>\n          <Route exact path=\"/about\">\n            <About mode={mode}/>\n          </Route>\n          <Route exact path=\"/\">\n          <div className=\"container mt-5\">\n            <Textform heading=\"Enter Your Text Here\" mode={mode}/>\n          </div>\n          </Route>\n        </Switch>\n        </Router>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}